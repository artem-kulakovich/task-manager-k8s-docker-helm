/*
 * This file is generated by jOOQ.
 */
package by.bntu.fitr.authenticationservice.dao.jooq.tables;


import by.bntu.fitr.authenticationservice.dao.jooq.Keys;
import by.bntu.fitr.authenticationservice.dao.jooq.Public;
import by.bntu.fitr.authenticationservice.dao.jooq.tables.records.RolePermissionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePermissions extends TableImpl<RolePermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.role_permissions</code>
     */
    public static final RolePermissions ROLE_PERMISSIONS = new RolePermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolePermissionsRecord> getRecordType() {
        return RolePermissionsRecord.class;
    }

    /**
     * The column <code>public.role_permissions.role_id</code>.
     */
    public final TableField<RolePermissionsRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.role_permissions.permission_id</code>.
     */
    public final TableField<RolePermissionsRecord, Integer> PERMISSION_ID = createField(DSL.name("permission_id"), SQLDataType.INTEGER, this, "");

    private RolePermissions(Name alias, Table<RolePermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolePermissions(Name alias, Table<RolePermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.role_permissions</code> table reference
     */
    public RolePermissions(String alias) {
        this(DSL.name(alias), ROLE_PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.role_permissions</code> table reference
     */
    public RolePermissions(Name alias) {
        this(alias, ROLE_PERMISSIONS);
    }

    /**
     * Create a <code>public.role_permissions</code> table reference
     */
    public RolePermissions() {
        this(DSL.name("role_permissions"), null);
    }

    public <O extends Record> RolePermissions(Table<O> child, ForeignKey<O, RolePermissionsRecord> key) {
        super(child, key, ROLE_PERMISSIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<RolePermissionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RolePermissionsRecord, ?>>asList(Keys.ROLE_PERMISSIONS__ROLE_PERMISSIONS_ROLE_ID_FKEY, Keys.ROLE_PERMISSIONS__ROLE_PERMISSIONS_PERMISSION_ID_FKEY);
    }

    public Role role() {
        return new Role(this, Keys.ROLE_PERMISSIONS__ROLE_PERMISSIONS_ROLE_ID_FKEY);
    }

    public Permission permission() {
        return new Permission(this, Keys.ROLE_PERMISSIONS__ROLE_PERMISSIONS_PERMISSION_ID_FKEY);
    }

    @Override
    public RolePermissions as(String alias) {
        return new RolePermissions(DSL.name(alias), this);
    }

    @Override
    public RolePermissions as(Name alias) {
        return new RolePermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissions rename(String name) {
        return new RolePermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermissions rename(Name name) {
        return new RolePermissions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
